{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/navy/source/js/toc.js","path":"js/toc.js","modified":1},{"_id":"themes/navy/source/js/mobile_nav.js","path":"js/mobile_nav.js","modified":1},{"_id":"themes/navy/source/js/lang_select.js","path":"js/lang_select.js","modified":1},{"_id":"themes/navy/source/css/navy.styl","path":"css/navy.styl","modified":1},{"_id":"source/robots.txt","path":"robots.txt","modified":1},{"_id":"source/logo.svg","path":"logo.svg","modified":1},{"_id":"source/logo.png","path":"logo.png","modified":1},{"_id":"source/icon/mstile-70x70.png","path":"icon/mstile-70x70.png","modified":1},{"_id":"source/icon/mstile-310x310.png","path":"icon/mstile-310x310.png","modified":1},{"_id":"source/icon/mstile-310x150.png","path":"icon/mstile-310x150.png","modified":1},{"_id":"source/icon/mstile-150x150.png","path":"icon/mstile-150x150.png","modified":1},{"_id":"source/icon/mstile-144x144.png","path":"icon/mstile-144x144.png","modified":1},{"_id":"source/icon/favicon-96x96.png","path":"icon/favicon-96x96.png","modified":1},{"_id":"source/icon/favicon-32x32.png","path":"icon/favicon-32x32.png","modified":1},{"_id":"source/icon/favicon-196x196.png","path":"icon/favicon-196x196.png","modified":1},{"_id":"source/icon/favicon-16x16.png","path":"icon/favicon-16x16.png","modified":1},{"_id":"source/icon/favicon-160x160.png","path":"icon/favicon-160x160.png","modified":1},{"_id":"source/icon/apple-touch-icon.png","path":"icon/apple-touch-icon.png","modified":1},{"_id":"source/icon/apple-touch-icon-precomposed.png","path":"icon/apple-touch-icon-precomposed.png","modified":1},{"_id":"source/icon/apple-touch-icon-76x76.png","path":"icon/apple-touch-icon-76x76.png","modified":1},{"_id":"source/icon/apple-touch-icon-72x72.png","path":"icon/apple-touch-icon-72x72.png","modified":1},{"_id":"source/icon/apple-touch-icon-60x60.png","path":"icon/apple-touch-icon-60x60.png","modified":1},{"_id":"source/icon/apple-touch-icon-57x57.png","path":"icon/apple-touch-icon-57x57.png","modified":1},{"_id":"source/icon/apple-touch-icon-152x152.png","path":"icon/apple-touch-icon-152x152.png","modified":1},{"_id":"source/icon/apple-touch-icon-144x144.png","path":"icon/apple-touch-icon-144x144.png","modified":1},{"_id":"source/icon/apple-touch-icon-120x120.png","path":"icon/apple-touch-icon-120x120.png","modified":1},{"_id":"source/icon/apple-touch-icon-114x114.png","path":"icon/apple-touch-icon-114x114.png","modified":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1},{"_id":"source/docs/setup/now-test.png","path":"docs/setup/now-test.png","modified":1},{"_id":"source/browserconfig.xml","path":"browserconfig.xml","modified":1}],"Cache":[{"_id":"source/_data/menu.yml","shasum":"304349d7ca22ddc304cd750e51d419813ae6b317","modified":1436948394000},{"_id":"source/_posts/2014-06-14-hexo-2-7-released.md","shasum":"42c84015c54ab9f4eae7c9872c4424d3e206b85f","modified":1436141594000},{"_id":"source/_data/sidebar.yml","shasum":"53bdc926ca370ea8639e068530827aa80e625169","modified":1437619544000},{"_id":"source/_data/languages.yml","shasum":"df782b2abd2e0a269b02707b4d059f1d6bde900a","modified":1436141594000},{"_id":"source/_posts/2015-02-27-new-documentation-and-registry.md","shasum":"5d3c2e2beba6c567fcd1a1e229ac7e318a0c16ea","modified":1436141594000},{"_id":"source/_posts/2014-07-13-hexo-2-8-released.md","shasum":"d4808f72f9477ece3e12da24cf1bd1d7ea50d9df","modified":1436141594000},{"_id":"source/docs/index.md","shasum":"a3082994839b51949717eb074a7c841cfae78434","modified":1436870739000},{"_id":"source/browserconfig.xml","shasum":"f54412705ab9eb69b544f438c9a1e15ae57f27c0","modified":1436141594000},{"_id":"source/docs/configuration.md","shasum":"d4d793eed92a993bbfba45814af88f55d3f5ce62","modified":1437035195000},{"_id":"source/_posts/2015-03-05-hexo-3-0-released.md","shasum":"20d170ee5735a312cfc052e136fed7e304a4d1f7","modified":1436141594000},{"_id":"source/docs/setup.md","shasum":"207bff493eb3211c3001eadcbd2bc1284be2b141","modified":1437619141000},{"_id":"source/docs/spm2a3.md","shasum":"18cbbd33f1753eade7bc2478697e4eb3121ae075","modified":1437034897000},{"_id":"source/docs/setup/now-test.png","shasum":"a99abddb5fe434e6e59a5e312f9d5761a969624d","modified":1437127646000},{"_id":"source/docs/spm2to3.md","shasum":"fdf8d08d9b40e11ecbb65d47412eba5f880d53d0","modified":1436953233000},{"_id":"source/docs/spm3.md","shasum":"5bc30277b83b08ad3b5b077a3237e5053d465ca6","modified":1437619958000},{"_id":"source/icon/apple-touch-icon-114x114.png","shasum":"a4b2129fa51b447b676a5a34329bb498faca0ef5","modified":1436141594000},{"_id":"source/docs/started.md","shasum":"a549adf6cb7526fed1e2cfb43304784314164477","modified":1437038233000},{"_id":"source/icon/apple-touch-icon-152x152.png","shasum":"c099645d3bc12cb02f0bdad651edd280bbd86a9b","modified":1436141594000},{"_id":"source/icon/apple-touch-icon-144x144.png","shasum":"d364758b94da28035a5741497fdc4ac54c6f8972","modified":1436141594000},{"_id":"source/favicon.ico","shasum":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1436141594000},{"_id":"source/icon/apple-touch-icon-120x120.png","shasum":"8df23624cd19818fbcabdeda215b8765fc9d1923","modified":1436141594000},{"_id":"source/icon/apple-touch-icon-60x60.png","shasum":"a4944c20a0c3f4a639c511269a7706663b01d375","modified":1436141594000},{"_id":"source/icon/apple-touch-icon-57x57.png","shasum":"ccd4eeaa6897dc3b8f621f28f9f7e10db2ae3889","modified":1436141594000},{"_id":"source/icon/apple-touch-icon-76x76.png","shasum":"29a8a2c698996bda55f1dd8dd9b8783cb91810a8","modified":1436141594000},{"_id":"source/icon/apple-touch-icon-precomposed.png","shasum":"519e8654825c6e49054fe88949d946b1ef7d93e6","modified":1436141594000},{"_id":"source/icon/apple-touch-icon-72x72.png","shasum":"0033140e4489f320044b028f9cae42f57cc44c21","modified":1436141594000},{"_id":"source/icon/apple-touch-icon.png","shasum":"c099645d3bc12cb02f0bdad651edd280bbd86a9b","modified":1436141594000},{"_id":"source/icon/favicon-16x16.png","shasum":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1436141594000},{"_id":"source/icon/favicon-160x160.png","shasum":"2deeec3abde01dfef87220e399e1966b0b0cf876","modified":1436141594000},{"_id":"source/icon/favicon-196x196.png","shasum":"0b74ef7924bb41982e55c71cbc6c5e483b9a609f","modified":1436141594000},{"_id":"source/icon/mstile-144x144.png","shasum":"2b4d6d22388c6f4104018668e52275c29056b6e9","modified":1436141594000},{"_id":"source/icon/mstile-150x150.png","shasum":"403b5695a36504b2a51231c02b227a72ce2247b9","modified":1436141594000},{"_id":"source/icon/favicon-96x96.png","shasum":"42fc76f6e615ab7e64dffa84ba41e731e0a28396","modified":1436141594000},{"_id":"source/icon/favicon-32x32.png","shasum":"ab9bee1072060aa2f2cc9114daab236716887551","modified":1436141594000},{"_id":"source/icon/mstile-310x310.png","shasum":"c7692bfd39f62c93456349b67daaf573ecfdd8b4","modified":1436141594000},{"_id":"source/icon/mstile-70x70.png","shasum":"c1d990cbbd5d62c991f41a1474fb95ac2e90e4e0","modified":1436141594000},{"_id":"source/icon/mstile-310x150.png","shasum":"b052f59d2db8eaeee9a3a99aa39b7ae4d3a93f54","modified":1436141594000},{"_id":"source/index.jade","shasum":"46d6e439dd4318b9d29514905bbadc219fafb634","modified":1436949621000},{"_id":"source/logo.svg","shasum":"6657ba50e702d84afb32fe846bed54fba1a77add","modified":1436141594000},{"_id":"source/robots.txt","shasum":"55107e568647402d4e0d108be00fce6bded104d8","modified":1436141594000},{"_id":"source/logo.png","shasum":"a1e49e14162d7f2bc717111f8f07c86cb5ae84df","modified":1436141594000},{"_id":"source/_posts/2014-07-13-hexo-2-8-released/generate-console.png","shasum":"1112c1f241871475b1ddac6eeecfea576abb465f","modified":1436141594000},{"_id":"themes/navy/languages/zh-cn.yml","shasum":"3218e8871c496f036c942f4fcd0183bad61e9d44","modified":1437619574000},{"_id":"themes/navy/layout/archive.swig","shasum":"6076f145cb3bcc55353e1c6169f4ea7f42461af2","modified":1436141594000},{"_id":"themes/navy/languages/zh-tw.yml","shasum":"049e8fb02b3a036411d73824f7f17ca25823744b","modified":1436141594000},{"_id":"themes/navy/languages/en.yml","shasum":"0babd96fddd276b3895395df6bdff37bc070270f","modified":1436141594000},{"_id":"themes/navy/layout/layout.swig","shasum":"ab20ee9716a166c167c34606897b6d1330224646","modified":1436141594000},{"_id":"themes/navy/layout/index.swig","shasum":"083ffdf968d7ab1177aad93a385da8ef0cb4ffdf","modified":1436932203000},{"_id":"themes/navy/layout/page.swig","shasum":"6912557930a4aa2d7edda55ffa1b1519fd838921","modified":1436141594000},{"_id":"themes/navy/layout/partial/comment.swig","shasum":"7518fca2cd8bf0f5558e71e866f992c2b1e1ed20","modified":1436141594000},{"_id":"themes/navy/layout/partial/google_analytics.swig","shasum":"eb4791e9e0627be70b4bc9d086110f9313cd1d2c","modified":1436141594000},{"_id":"themes/navy/layout/partial/footer.swig","shasum":"97cf3111632f9d956059b2ac6e3a371aca5c561e","modified":1436846242000},{"_id":"themes/navy/layout/partial/after_footer.swig","shasum":"57dc9f6d541a59edca407b32eedb65759af7f9f0","modified":1436521710000},{"_id":"themes/navy/layout/partial/plugin.swig","shasum":"17b6c6945e4b1b41dbb10d851f85ca10100c28ea","modified":1436141594000},{"_id":"themes/navy/layout/partial/mobile_nav.swig","shasum":"b7e6894ad08946bac5cb9e04a5369952590b8899","modified":1436141594000},{"_id":"themes/navy/layout/partial/header.swig","shasum":"bdf9106d8678806d1eebf4609b2ca7939bbc6534","modified":1436522131000},{"_id":"themes/navy/layout/partial/head.swig","shasum":"18106fcab316b03d354154ed91c99ab417d8b008","modified":1436520482000},{"_id":"themes/navy/layout/partial/sidebar.swig","shasum":"52ddc48f6c53bf8bd155f94e1fd5b9dbcc19d0a5","modified":1436141594000},{"_id":"themes/navy/layout/partial/theme.swig","shasum":"5a279ad8f6c6b7c104cce495faa563d8b7a7c74a","modified":1436141594000},{"_id":"themes/navy/layout/partial/share.swig","shasum":"481083782694c9d84efff46a8bb5235e643c063f","modified":1436521854000},{"_id":"themes/navy/layout/partial/post.swig","shasum":"4772c721d4f046687629685239eed8badd6de546","modified":1436141594000},{"_id":"themes/navy/source/css/_partial/archive.styl","shasum":"f7ff7e9eb92f6786ccbf79bb4193a81ab8b49f8b","modified":1436141594000},{"_id":"themes/navy/source/css/_partial/base.styl","shasum":"91e2b7a618c3103a49445ae0187920924d6a19c9","modified":1436141594000},{"_id":"themes/navy/layout/post.swig","shasum":"0478deebea5fd2dc6c2357edcac1cce4b105f712","modified":1436141594000},{"_id":"themes/navy/source/css/_partial/footer.styl","shasum":"cf03e141fb0db12785d6b6e61a24872568b20dac","modified":1436141594000},{"_id":"themes/navy/source/css/_partial/header.styl","shasum":"999d8aef20335e5a9dc505739652eba5c498d8bf","modified":1436141594000},{"_id":"themes/navy/source/css/_partial/highlight.styl","shasum":"42b0773574c4137dce4657e2e651e8f1dba3b906","modified":1436952981000},{"_id":"themes/navy/layout/plugins.swig","shasum":"ca573d80f04722504e0d1ed564ebb2395ebcd31d","modified":1436141594000},{"_id":"themes/navy/source/css/_partial/plugins.styl","shasum":"e69ad06200a86c856d7c361be9289b5931593ab8","modified":1436141594000},{"_id":"themes/navy/source/css/_partial/page.styl","shasum":"3ae39a6e7840f8ae2ad7af5c73ec47cfef5693ed","modified":1436141594000},{"_id":"themes/navy/source/css/_partial/mobile_nav.styl","shasum":"f426693b4cd8b1dbce20f8d5d2a8542a09f162c0","modified":1436141594000},{"_id":"themes/navy/source/css/_partial/index.styl","shasum":"ad7a0f8c45795148f9128ff8f3a56028c948ad2e","modified":1436949430000},{"_id":"themes/navy/source/css/_partial/post.styl","shasum":"037864b22a7775df5086f8977c51d86dd7053625","modified":1436141594000},{"_id":"themes/navy/source/css/_variables.styl","shasum":"9a0dcbba28553da756199b839c629bceafce7ec2","modified":1436141594000},{"_id":"themes/navy/source/css/navy.styl","shasum":"234627866d9597a4f810099e29cd266089a9dcca","modified":1436141594000},{"_id":"themes/navy/source/css/_partial/sidebar.styl","shasum":"39451aef60afca98aa757eb76690a9e3e32cffbb","modified":1436141594000},{"_id":"themes/navy/source/js/lang_select.js","shasum":"3f04519f4e225ce62f603ba730d5f01bd8c2d39c","modified":1436521585000},{"_id":"themes/navy/source/js/toc.js","shasum":"179e3d2634672d401e3a1d85d1b558e5a61f84dc","modified":1436141594000},{"_id":"themes/navy/source/js/mobile_nav.js","shasum":"503a422e1322a458a311330e0345b3a49a8f8f05","modified":1436141594000},{"_id":"source/_posts/2014-07-13-hexo-2-8-released/generate-console@2x.png","shasum":"f2a8a4a7461e977c5908015f9bbb8befcd4524bb","modified":1436141594000}],"Category":[],"Data":[{"_id":"languages","data":{"en":"English","zh-tw":{"name":"正體中文","disqus_lang":"zh_TW"},"zh-cn":{"name":"简体中文","disqus_lang":"zh"}}},{"_id":"sidebar","data":{"docs":{"getting_started":{"about":"index.html","configuration":"configuration.html","started":"started.html","setup":"setup.html"},"other":{"spm2a3":"spm2a3.html","spm2to3":"spm2to3.html","spm3":"spm3.html"}}}},{"_id":"menu","data":{"docs":"/docs/"}}],"Page":[{"layout":"index","description":"Hexo is a fast, simple & powerful blog framework powered by Node.js.","subtitle":"pandora 组件库","comments":0,"_content":"\n- var spmDocs = 'http://10.5.121.139:3001/docs'\nh2.intro-title Pandora \n  span 基础设施  \nul.intro-feature-list\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title \n        a(href=\"#{spmDocs}/pandora-class/latest/\") Class\n          small 1.1.0\n      p.intro-feature-desc 提供简洁的 OO 实现\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-events/latest/\") Events\n          small 1.1.0\n      p.intro-feature-desc 实现了事件订阅与发布\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-base/latest/\") Base\n          small 1.1.0\n      p.intro-feature-desc 一个基础类，提供 Class、Events 和 Aspect 支持\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title \n        a(href=\"#{spmDocs}/pandora-widget/latest/\") Widget\n          small 1.1.0\n      p.intro-feature-desc UI 组件的基础类，约定了组件的基本生命周期，实现了一些通用功能\n\nh2.intro-title Pandora  \n  span 工具\n\n\nh2.intro-title Pandora \n  span UI 组件  \nul.intro-feature-list\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title \n        a(href=\"#{spmDocs}/pandora-dialog/latest/\") Dialog\n          small 1.1.0\n      p.intro-feature-desc Dialog 是通用对话框容器，提供显隐关闭、遮罩层、内容区域自定义以及模态对话框等功能。\n      \n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-select/latest/\") Select\n          small 1.1.0\n      p.intro-feature-desc 自定义 select 选择框\n\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-switchable/latest/\") Switchable\n          small 1.1.0\n      p.intro-feature-desc Switchable提供了切换的基本操作, 并通过参数配置实现了自动播放, 循环, 切换等操作, 并提供不同的特点封装成了Tabs, Slide, Carousel模块. 用户可以根据自己的需求引用不同的模块.    \n  \n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-gallery/latest/\") gallery\n          small 1.1.0\n      p.intro-feature-desc 组图组件\n\n\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-validate/latest/\") validate\n          small 1.1.0\n      p.intro-feature-desc 表单验证组件\n","source":"index.jade","raw":"layout: index\ndescription: Hexo is a fast, simple & powerful blog framework powered by Node.js.\nsubtitle: pandora 组件库\ncomments: false\n---\n\n- var spmDocs = 'http://10.5.121.139:3001/docs'\nh2.intro-title Pandora \n  span 基础设施  \nul.intro-feature-list\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title \n        a(href=\"#{spmDocs}/pandora-class/latest/\") Class\n          small 1.1.0\n      p.intro-feature-desc 提供简洁的 OO 实现\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-events/latest/\") Events\n          small 1.1.0\n      p.intro-feature-desc 实现了事件订阅与发布\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-base/latest/\") Base\n          small 1.1.0\n      p.intro-feature-desc 一个基础类，提供 Class、Events 和 Aspect 支持\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title \n        a(href=\"#{spmDocs}/pandora-widget/latest/\") Widget\n          small 1.1.0\n      p.intro-feature-desc UI 组件的基础类，约定了组件的基本生命周期，实现了一些通用功能\n\nh2.intro-title Pandora  \n  span 工具\n\n\nh2.intro-title Pandora \n  span UI 组件  \nul.intro-feature-list\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title \n        a(href=\"#{spmDocs}/pandora-dialog/latest/\") Dialog\n          small 1.1.0\n      p.intro-feature-desc Dialog 是通用对话框容器，提供显隐关闭、遮罩层、内容区域自定义以及模态对话框等功能。\n      \n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-select/latest/\") Select\n          small 1.1.0\n      p.intro-feature-desc 自定义 select 选择框\n\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-switchable/latest/\") Switchable\n          small 1.1.0\n      p.intro-feature-desc Switchable提供了切换的基本操作, 并通过参数配置实现了自动播放, 循环, 切换等操作, 并提供不同的特点封装成了Tabs, Slide, Carousel模块. 用户可以根据自己的需求引用不同的模块.    \n  \n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-gallery/latest/\") gallery\n          small 1.1.0\n      p.intro-feature-desc 组图组件\n\n\n  li.intro-feature-wrap\n    .intro-feature\n      h3.intro-feature-title\n        a(href=\"#{spmDocs}/pandora-validate/latest/\") validate\n          small 1.1.0\n      p.intro-feature-desc 表单验证组件\n","date":"2015-07-10T08:21:01.000Z","updated":"2015-07-15T08:40:21.000Z","path":"index.html","title":"","_id":"cicfvulq40000tfcy1mknq8xn"},{"title":"快速上手","_content":"\n待补充...\n","source":"docs/started.md","raw":"title: 快速上手\n---\n\n待补充...\n","date":"2015-07-16T08:28:28.000Z","updated":"2015-07-16T09:17:13.000Z","path":"docs/started.html","comments":1,"layout":"page","_id":"cicfvulqd0001tfcy1wcstgtb"},{"title":"spm3 官方文档","_content":"\n{% note warn SPM 3.6 %}\nspm 3.6 版本改动较大，也更好用，打包机制采用 webpack 的方式，如以前用 seajs 的，要用 spm-sea 打包\n{% endnote %}\n\n\n[https://github.com/spmjs/docs/blob/master/zh-cn/README.md](https://github.com/spmjs/docs/blob/master/zh-cn/README.md)\n","source":"docs/spm3.md","raw":"title: spm3 官方文档\n\n---\n\n{% note warn SPM 3.6 %}\nspm 3.6 版本改动较大，也更好用，打包机制采用 webpack 的方式，如以前用 seajs 的，要用 spm-sea 打包\n{% endnote %}\n\n\n[https://github.com/spmjs/docs/blob/master/zh-cn/README.md](https://github.com/spmjs/docs/blob/master/zh-cn/README.md)\n","date":"2015-07-23T02:42:41.000Z","updated":"2015-07-23T02:52:38.000Z","path":"docs/spm3.html","comments":1,"layout":"page","_id":"cicfvulqe0002tfcyynk13ya0"},{"title":"迁移 spm2 的模块到 spm3","_content":"\n## DEMO\n\n以 [anima-widget](https://github.com/animajs/widget/tree/commonjs) 为例。\n\n* [commit diff](https://github.com/animajs/widget/commit/024defa162c5cac80d440e6c8bfbea9de8ce375d?w=1)\n\n## 迁移步骤\n\n### 安装 spm3\n\n```bash\n$ npm install spm -g\n```\n\n### 修改 package.json\n\n1. 合并 family 到 name，例如：\n\n  ```diff\n  - \"name\": \"widget\",\n  - \"family\": \"anima\"\n  + \"name\": \"anima-widget\"\n  ```\n\n  spm@3.x 中不再有 family，和 npm 一样我们使用唯一的 name 占坑的方式组织模块。\n\n  以上是 Arale 等模块的迁移逻辑，形式统一且避免冲突。如果没有被占用，你当然可以直接使用原来的 name 。\n    \n2. 修改 spm.output 为 spm.main，注意 spm.main 需为字符串\n\n  ```diff\n  - \"output\": [\"src/widget.js\"]\n  + \"main\": \"src/widget\"\n  ```\n  \n  这里更推荐的做法是在根目录建立 `index.js`，package.json 里设 `\"main\": \"index.js\"`，然后 index.js 里 `module.exports = require(\"./src/widget\");`\n    \n3. 修改 spm.alias 为 spm.dependencies，注意 dependencies 的格式为 `\"{{name}}\": \"{{version}}\"`\n\n  ```diff\n  - \"alias\": { \"base\": \"anima/base/1.1.0/base\" }\n  + \"dependencies\": { \"anima-base\": \"1.1.0\" }\n  ```\n\n4. 如果原来有使用 jQuery，修正原来 require('$') 的写法为 require('jquery')，并在依赖中指明 jquery 版本号，建议为 1.7.2 。\n\n  ```diff\n  \"dependencies\": { \n  + \"jquery\": \"1.7.2\"\n  }\n  ```\n\n### 修改源文件，通常只要做两点修改\n\n1. 去 define 封装，采用 CommonJS 的书写规范。\n\n  ```diff\n  - define(function(require, module, exports) {\n    ...\n  - });\n  ```\n\n2. 如果有依赖其他 package，注意下依赖的 package 是否有修改 **name**，比如：\n\n  ```diff\n  - var base = require('base');\n  + var base = require('anima-base');\n  ```\n\n3. spm install 安装依赖，然后运行 spm doc watch 并打开 http://127.0.0.1:8000/ ，确保文档和演示都能正确显示。\n\n### 修改 tests 目录里的用例文件\n\n1. 去 define 封装\n\n  ```diff\n  - define(function(require, module, exports) {\n    ...\n  - });\n  ```\n\n2. 修改 require 的绝对地址为相对地址。\n\n3. 添加 expect 依赖到 devDependencies 中。\n\n  ```diff\n  \"spm\": {\n    \"devDependencies\": {\n  +   \"expect.js\": \"0.3.1\"\n    }\n  }\n  ```\n\n4. 运行 spm test 确保用例测试通过。\n\n5. 运行 spm doc watch 并打开 http://127.0.0.1:8000/tests/runner.html ，确保用例跑过。\n\n### 删除和忽略部分目录\n\n1. 删除 dist 目录，构建后的文件不再存在源码中\n\n2. 增加 .spmignore 文件，参考[这个](https://github.com/spmjs/spm/blob/a778d60b0b14ed83734900041ddab08e472cb5b1/lib/template/.spmignore)。\n\n### spm 发布\n\n```bash\n# 发布\n$ spm publish\n```\n\n## 参考链接\n\n* [spm@3x package.json 详解](http://spmjs.io/documentation/package.json)\n* [spm@3x difference From spm@2.x](http://spmjs.io/documentation/difference-from-2.x)\n* [spm@3x 官网](http://spmjs.io/)\n* [spm@3.0 和 spmjs.org 的未来](https://github.com/spmjs/spm/issues/718)\n","source":"docs/spm2to3.md","raw":"title: 迁移 spm2 的模块到 spm3\n---\n\n## DEMO\n\n以 [anima-widget](https://github.com/animajs/widget/tree/commonjs) 为例。\n\n* [commit diff](https://github.com/animajs/widget/commit/024defa162c5cac80d440e6c8bfbea9de8ce375d?w=1)\n\n## 迁移步骤\n\n### 安装 spm3\n\n```bash\n$ npm install spm -g\n```\n\n### 修改 package.json\n\n1. 合并 family 到 name，例如：\n\n  ```diff\n  - \"name\": \"widget\",\n  - \"family\": \"anima\"\n  + \"name\": \"anima-widget\"\n  ```\n\n  spm@3.x 中不再有 family，和 npm 一样我们使用唯一的 name 占坑的方式组织模块。\n\n  以上是 Arale 等模块的迁移逻辑，形式统一且避免冲突。如果没有被占用，你当然可以直接使用原来的 name 。\n    \n2. 修改 spm.output 为 spm.main，注意 spm.main 需为字符串\n\n  ```diff\n  - \"output\": [\"src/widget.js\"]\n  + \"main\": \"src/widget\"\n  ```\n  \n  这里更推荐的做法是在根目录建立 `index.js`，package.json 里设 `\"main\": \"index.js\"`，然后 index.js 里 `module.exports = require(\"./src/widget\");`\n    \n3. 修改 spm.alias 为 spm.dependencies，注意 dependencies 的格式为 `\"{{name}}\": \"{{version}}\"`\n\n  ```diff\n  - \"alias\": { \"base\": \"anima/base/1.1.0/base\" }\n  + \"dependencies\": { \"anima-base\": \"1.1.0\" }\n  ```\n\n4. 如果原来有使用 jQuery，修正原来 require('$') 的写法为 require('jquery')，并在依赖中指明 jquery 版本号，建议为 1.7.2 。\n\n  ```diff\n  \"dependencies\": { \n  + \"jquery\": \"1.7.2\"\n  }\n  ```\n\n### 修改源文件，通常只要做两点修改\n\n1. 去 define 封装，采用 CommonJS 的书写规范。\n\n  ```diff\n  - define(function(require, module, exports) {\n    ...\n  - });\n  ```\n\n2. 如果有依赖其他 package，注意下依赖的 package 是否有修改 **name**，比如：\n\n  ```diff\n  - var base = require('base');\n  + var base = require('anima-base');\n  ```\n\n3. spm install 安装依赖，然后运行 spm doc watch 并打开 http://127.0.0.1:8000/ ，确保文档和演示都能正确显示。\n\n### 修改 tests 目录里的用例文件\n\n1. 去 define 封装\n\n  ```diff\n  - define(function(require, module, exports) {\n    ...\n  - });\n  ```\n\n2. 修改 require 的绝对地址为相对地址。\n\n3. 添加 expect 依赖到 devDependencies 中。\n\n  ```diff\n  \"spm\": {\n    \"devDependencies\": {\n  +   \"expect.js\": \"0.3.1\"\n    }\n  }\n  ```\n\n4. 运行 spm test 确保用例测试通过。\n\n5. 运行 spm doc watch 并打开 http://127.0.0.1:8000/tests/runner.html ，确保用例跑过。\n\n### 删除和忽略部分目录\n\n1. 删除 dist 目录，构建后的文件不再存在源码中\n\n2. 增加 .spmignore 文件，参考[这个](https://github.com/spmjs/spm/blob/a778d60b0b14ed83734900041ddab08e472cb5b1/lib/template/.spmignore)。\n\n### spm 发布\n\n```bash\n# 发布\n$ spm publish\n```\n\n## 参考链接\n\n* [spm@3x package.json 详解](http://spmjs.io/documentation/package.json)\n* [spm@3x difference From spm@2.x](http://spmjs.io/documentation/difference-from-2.x)\n* [spm@3x 官网](http://spmjs.io/)\n* [spm@3.0 和 spmjs.org 的未来](https://github.com/spmjs/spm/issues/718)\n","date":"2015-07-15T09:07:07.000Z","updated":"2015-07-15T09:40:33.000Z","path":"docs/spm2to3.html","comments":1,"layout":"page","_id":"cicfvulqg0003tfcy4kuub0wk"},{"title":"spm2 与 spm3 共存方案","_content":"\n## 安装脚本\n\n```bash\ngit clone https://github.com/spmjs/spm ~/.spm3\ncd ~/.spm3\ncnpm install\nln -sf `pwd`/bin/spm /usr/local/bin/spm3\n```\n\n至此，spm -V 应该是 2，spm3 -V 应该是 3 。\n\n## 安装脚本 II\n\n上面的方案是在不影响 spm2 的情况下，安装 spm3，因此 spm -V == 2.x，而 spm3 -V == 3.x\n\n但是对于多数情况下使用 spm3 的用户， 我个人推荐倒过来，默认的 spm -V == 3.x，而 spm2 -V == 2.x，更多的，spm3 -V == 3.x\n\n```bash\ngit clone -b 2.x --depth 1 https://github.com/spmjs/spm ~/.spm2\ncd ~/.spm2\nnpm install\nln -sf `pwd`/bin/spm /usr/local/bin/spm2\nnpm install spm -g\nln -sf /usr/local/bin/spm /usr/local/bin/spm3\n```\n\n## Windows 环境\n\nWindows下通过clone安装需要自己编写下cmd脚本，把spm3加到PATH环境变量中（假设也是clone到当前用户根目录的.spm3目录，在.spm3/bin目录下将spm更名为spm3，新建spm3.cmd文件，输入以下内容）\n\n```bash\n@echo off\nset NODE_PATH=C:%HOMEPATH%\\.spm3\\node_modules\n@echo on\n@IF EXIST \"%~dp0\\node.exe\" (\n  \"%~dp0\\node.exe\"  \"%~dp0\\spm3\" %*\n) ELSE (\n  node  \"%~dp0\\spm3\" %*\n)\n```\n\n## 插件使用\n\n原有的其他插件和子命令可以保持原来的用法。比如 build :\n\n在 spm2 中使用：\n\n```bash\nspm build\n```\n\n在 spm3 中使用：\n\n```bash\nspm3 build\n```\n\n","source":"docs/spm2a3.md","raw":"title: spm2 与 spm3 共存方案\n---\n\n## 安装脚本\n\n```bash\ngit clone https://github.com/spmjs/spm ~/.spm3\ncd ~/.spm3\ncnpm install\nln -sf `pwd`/bin/spm /usr/local/bin/spm3\n```\n\n至此，spm -V 应该是 2，spm3 -V 应该是 3 。\n\n## 安装脚本 II\n\n上面的方案是在不影响 spm2 的情况下，安装 spm3，因此 spm -V == 2.x，而 spm3 -V == 3.x\n\n但是对于多数情况下使用 spm3 的用户， 我个人推荐倒过来，默认的 spm -V == 3.x，而 spm2 -V == 2.x，更多的，spm3 -V == 3.x\n\n```bash\ngit clone -b 2.x --depth 1 https://github.com/spmjs/spm ~/.spm2\ncd ~/.spm2\nnpm install\nln -sf `pwd`/bin/spm /usr/local/bin/spm2\nnpm install spm -g\nln -sf /usr/local/bin/spm /usr/local/bin/spm3\n```\n\n## Windows 环境\n\nWindows下通过clone安装需要自己编写下cmd脚本，把spm3加到PATH环境变量中（假设也是clone到当前用户根目录的.spm3目录，在.spm3/bin目录下将spm更名为spm3，新建spm3.cmd文件，输入以下内容）\n\n```bash\n@echo off\nset NODE_PATH=C:%HOMEPATH%\\.spm3\\node_modules\n@echo on\n@IF EXIST \"%~dp0\\node.exe\" (\n  \"%~dp0\\node.exe\"  \"%~dp0\\spm3\" %*\n) ELSE (\n  node  \"%~dp0\\spm3\" %*\n)\n```\n\n## 插件使用\n\n原有的其他插件和子命令可以保持原来的用法。比如 build :\n\n在 spm2 中使用：\n\n```bash\nspm build\n```\n\n在 spm3 中使用：\n\n```bash\nspm3 build\n```\n\n","date":"2015-07-15T07:52:32.000Z","updated":"2015-07-16T08:21:37.000Z","path":"docs/spm2a3.html","comments":1,"layout":"page","_id":"cicfvulqi0004tfcy134olk9v"},{"title":"开发一个组件","_content":"\n## 脚手架\n\n```bash\n$ mkdir now\n$ cd now\n$ yo pandora\n\n```\n\n输出如下：\n\n```bash\n     _-----_\n    |       |\n    |--(o)--|   .--------------------------.\n   `---------´  |    Welcome to Yeoman,    |\n    ( _´U`_ )   |   ladies and gentlemen!  |\n    /___A___\\   '__________________________'\n     |  ~  |\n   __'.___.'__\n ´   `  |° ´ Y `\n\ndon't forget to run spm install after generator is done!\n? What is the name of your project? now\n? Your project description: \n? Base class that extended by: pandora-widget\n   create examples/index.md\n   create tests/index-spec.js\n   create package.json\n   create README.md\n   create HISTORY.md\n   create Gulpfile.js\n   create index.js\n   create .editorconfig\n   create .spmignore\n   create .jshintrc\n   create .gitignore\n   create .travis.yml\n   create LICENSE-MIT\nplease run spm install and npm install!\n```\n\n此时已成功创建一个叫 now 的组件, 默认继承 pandora-widget\n\n## 安装依赖\n\n```bash\n$ spm install\n$ cnpm install\n```\n\n然后安装 moment 依赖\n\n```\n$ spm install moment --save\n```\n\n## 开发\n\n编辑 index.js\n\n```javascript\n'use strict';\n\nvar Widget = require('pandora-widget');\nvar moment = require('moment');\n\nvar Now = Widget.extend({\n\n  defaults: {\n    container: null\n  },\n\n  setup: function() {\n    this.option('content', '此时：' + moment().format('dddd, MMMM Do YYYY, h:mm:ss a'));\n    this.render();\n  },\n\n  year: function() {\n    return moment().year();\n  }\n\n});\n\nmodule.exports = Now;\n\n```\n\n编辑 `examples/index.md`:\n\n<pre>\n# Demo\n\n---\n<style type=\"text/css\">\n  .widget {\n    border: 1px solid #ccc;\n    padding: 10px;\n  }\n</style>\n## Normal usage\n\n### HTML\n\n````html\n<div id=\"example\" class=\"widget\"></div>\n````\n\n### JavaScript\n\n````javascript\nvar Now = require('./index');\nnew Now({\n  element: '#example'\n});\n````\n</pre>\n\n## 本地调试\n\n执行 `spm doc` 开启一个文档服务 127.0.0.1:8000 ：\n\n```bash\n$ spm doc\n```\n\n然后在浏览器里打开 [http://127.0.0.1:8000/examples/](http://127.0.0.1:8000/examples/) 即可看到结果。\n\n你可以在 Markdown 文件里用 3 个 &#96; 来引用代码，也可以用 4 个 &#96;。\n\n这是一条特殊规则，引用的代码首先会高亮显示，然后还会被插入一个 script 标签来同步执行。这一点非常有用，在调试 demo 的同时，还可以写出优雅的文档。\n\n如果想在 demo 中插入 iframe，需声明代码为 frame 类型：\n\n<pre>\n````iframe:600\nI am in a iframe of 600px high\n````\n</pre>\n\n如果不想用 `spm doc` 来调试代码，你还可以试试 spm server 来调试开发模式下的 CommonJS 代码。\n\n## 添加测试用例\n\n编辑测试文件 `tests/index-spec.js`，我们默认引用了一个断言方案 [expect.js](http://spmjs.io/package/expect.js) 。\n\n```javascript\nvar expect = require('expect.js');\nvar Now = require('../index');\n\ndescribe('now', function() {\n\n  it('normal usage', function() {\n    var now = new Now({container: 'body'});\n\n    expect(now.year()).to.be(2015);\n  });\n\n});\n\n```\n\n看看测试结果：\n\n```bash\n$ spm test\n```\n\n{% img /docs/setup/now-test.png %}\n\n你也可以在浏览器里打开 [http://127.0.0.1:8000/tests/runner.html](http://127.0.0.1:8000/tests/runner.html) 查看结果。\n\n此外，还可以打开 `coverage/lcov-report/index.html` 查看测试覆盖率。\n\n## 发布\n\n现在你已拥有一个包含完整功能和完善测试用例的组件里，尝试把他发布到内部的 spmjs 源。\n\n```bash\n$ spm publish\n```\n\n## 文档\n\n内部 spmjs 源, 可以托管组件文档。你只需要编辑 README.md 和 examples 目录，通过 spm doc watch 预览，然后发布.\n\n```bash\n$ spm doc publish\n```\n\n最新版文档的 url 是 http://10.5.121.139:3001/docs/&#123;&#123;name&#125;&#125;/latest ，也可以通过 http://10.5.121.139:3001/docs/&#123;&#123;name&#125;&#125;/&#123;&#123;version&#125;&#125;/ 访问到所有版本。\n\n比如：http://10.5.121.139:3001/docs/now/latest 。\n","source":"docs/setup.md","raw":"title: 开发一个组件\n---\n\n## 脚手架\n\n```bash\n$ mkdir now\n$ cd now\n$ yo pandora\n\n```\n\n输出如下：\n\n```bash\n     _-----_\n    |       |\n    |--(o)--|   .--------------------------.\n   `---------´  |    Welcome to Yeoman,    |\n    ( _´U`_ )   |   ladies and gentlemen!  |\n    /___A___\\   '__________________________'\n     |  ~  |\n   __'.___.'__\n ´   `  |° ´ Y `\n\ndon't forget to run spm install after generator is done!\n? What is the name of your project? now\n? Your project description: \n? Base class that extended by: pandora-widget\n   create examples/index.md\n   create tests/index-spec.js\n   create package.json\n   create README.md\n   create HISTORY.md\n   create Gulpfile.js\n   create index.js\n   create .editorconfig\n   create .spmignore\n   create .jshintrc\n   create .gitignore\n   create .travis.yml\n   create LICENSE-MIT\nplease run spm install and npm install!\n```\n\n此时已成功创建一个叫 now 的组件, 默认继承 pandora-widget\n\n## 安装依赖\n\n```bash\n$ spm install\n$ cnpm install\n```\n\n然后安装 moment 依赖\n\n```\n$ spm install moment --save\n```\n\n## 开发\n\n编辑 index.js\n\n```javascript\n'use strict';\n\nvar Widget = require('pandora-widget');\nvar moment = require('moment');\n\nvar Now = Widget.extend({\n\n  defaults: {\n    container: null\n  },\n\n  setup: function() {\n    this.option('content', '此时：' + moment().format('dddd, MMMM Do YYYY, h:mm:ss a'));\n    this.render();\n  },\n\n  year: function() {\n    return moment().year();\n  }\n\n});\n\nmodule.exports = Now;\n\n```\n\n编辑 `examples/index.md`:\n\n<pre>\n# Demo\n\n---\n<style type=\"text/css\">\n  .widget {\n    border: 1px solid #ccc;\n    padding: 10px;\n  }\n</style>\n## Normal usage\n\n### HTML\n\n````html\n<div id=\"example\" class=\"widget\"></div>\n````\n\n### JavaScript\n\n````javascript\nvar Now = require('./index');\nnew Now({\n  element: '#example'\n});\n````\n</pre>\n\n## 本地调试\n\n执行 `spm doc` 开启一个文档服务 127.0.0.1:8000 ：\n\n```bash\n$ spm doc\n```\n\n然后在浏览器里打开 [http://127.0.0.1:8000/examples/](http://127.0.0.1:8000/examples/) 即可看到结果。\n\n你可以在 Markdown 文件里用 3 个 &#96; 来引用代码，也可以用 4 个 &#96;。\n\n这是一条特殊规则，引用的代码首先会高亮显示，然后还会被插入一个 script 标签来同步执行。这一点非常有用，在调试 demo 的同时，还可以写出优雅的文档。\n\n如果想在 demo 中插入 iframe，需声明代码为 frame 类型：\n\n<pre>\n````iframe:600\nI am in a iframe of 600px high\n````\n</pre>\n\n如果不想用 `spm doc` 来调试代码，你还可以试试 spm server 来调试开发模式下的 CommonJS 代码。\n\n## 添加测试用例\n\n编辑测试文件 `tests/index-spec.js`，我们默认引用了一个断言方案 [expect.js](http://spmjs.io/package/expect.js) 。\n\n```javascript\nvar expect = require('expect.js');\nvar Now = require('../index');\n\ndescribe('now', function() {\n\n  it('normal usage', function() {\n    var now = new Now({container: 'body'});\n\n    expect(now.year()).to.be(2015);\n  });\n\n});\n\n```\n\n看看测试结果：\n\n```bash\n$ spm test\n```\n\n{% img /docs/setup/now-test.png %}\n\n你也可以在浏览器里打开 [http://127.0.0.1:8000/tests/runner.html](http://127.0.0.1:8000/tests/runner.html) 查看结果。\n\n此外，还可以打开 `coverage/lcov-report/index.html` 查看测试覆盖率。\n\n## 发布\n\n现在你已拥有一个包含完整功能和完善测试用例的组件里，尝试把他发布到内部的 spmjs 源。\n\n```bash\n$ spm publish\n```\n\n## 文档\n\n内部 spmjs 源, 可以托管组件文档。你只需要编辑 README.md 和 examples 目录，通过 spm doc watch 预览，然后发布.\n\n```bash\n$ spm doc publish\n```\n\n最新版文档的 url 是 http://10.5.121.139:3001/docs/&#123;&#123;name&#125;&#125;/latest ，也可以通过 http://10.5.121.139:3001/docs/&#123;&#123;name&#125;&#125;/&#123;&#123;version&#125;&#125;/ 访问到所有版本。\n\n比如：http://10.5.121.139:3001/docs/now/latest 。\n","date":"2015-07-16T09:17:33.000Z","updated":"2015-07-23T02:39:01.000Z","path":"docs/setup.html","comments":1,"layout":"page","_id":"cicfvulqk0005tfcyyk21p2yv"},{"title":"关于 Pandora","_content":"\n待补充\n","source":"docs/index.md","raw":"title: 关于 Pandora\n---\n\n待补充\n","date":"2015-07-14T10:45:12.000Z","updated":"2015-07-14T10:45:39.000Z","path":"docs/index.html","comments":1,"layout":"page","_id":"cicfvulqm0006tfcyn62s5boh"},{"title":"工具配置","_content":"\n\n> 本文章会帮助你安装 Pandora 配套的工具，包括 spm 和 git。\n\n## 安装 Node\n\n`Node.js` 支持 >= 0.10.29, 建议安装 >= 0.12.0\n\n### osx, linux 环境\n\n```bash\n$ git clone git@github.com:creationix/nvm.git ~/.nvm\n$ source ~/.nvm/nvm.sh\n# 安装\n$ nvm install v0.12.0\n# 显示当前本地安装的所有 Node.js\n$ nvm ls \n# 显示服务器所有可用的 Node.js\n$ nvm ls-remote\n# 本地可用的 Node.js 中使用 0.12.0\n$ nvm use 0.12.0\n# 设置每次启动默认版本\n$ nvm alias default 0.12.0\n```\n\n### window 环境\n\n这里假设大家都使用 `d:\\git` 目录存放 git 项目。\n\n```bash\n$ d:\n$ cd git\n$ git clone git@github.com:nanjingboy/nvmw.git\n# 设置 d:\\git\\nvmw 墓道到 PATH 环境变量\n$ set \"PATH=d:\\git\\nvmw;%PATH%\"\n# 安装\n$ nvmw install 0.12.0\n# 显示当前本地安装的所有 Node.js\n$ nvmw ls \n# 显示服务器所有可用的 Node.js\n$ nvmw ls-remote\n# 本地可用的 Node.js 中使用 0.12.0\n$ nvmw use 0.12.0\n# 设置每次启动默认版本\n$ nvmw switch 0.12.0\n```\n\n### node-gyp 编译环境配置 (可选)\n\nhttps://github.com/TooTallNate/node-gyp#installation\n\n## 安装 spm\n\nPanodra 已经全面迁移到 [spm3](http://10.5.121.139:3001) 的体系上。\n\n```bash\n$ npm install spm -g\n```\n\n## 安装 generator-pandora\n\n我们采用了 yeoman 来生成 pandora 组件，没有用 spm init 来初始\n\n```bash\n$ npm install yo generator-pandora -g\n```\n\n---\n\n好，安装工作完成！\n","source":"docs/configuration.md","raw":"title: 工具配置\n---\n\n\n> 本文章会帮助你安装 Pandora 配套的工具，包括 spm 和 git。\n\n## 安装 Node\n\n`Node.js` 支持 >= 0.10.29, 建议安装 >= 0.12.0\n\n### osx, linux 环境\n\n```bash\n$ git clone git@github.com:creationix/nvm.git ~/.nvm\n$ source ~/.nvm/nvm.sh\n# 安装\n$ nvm install v0.12.0\n# 显示当前本地安装的所有 Node.js\n$ nvm ls \n# 显示服务器所有可用的 Node.js\n$ nvm ls-remote\n# 本地可用的 Node.js 中使用 0.12.0\n$ nvm use 0.12.0\n# 设置每次启动默认版本\n$ nvm alias default 0.12.0\n```\n\n### window 环境\n\n这里假设大家都使用 `d:\\git` 目录存放 git 项目。\n\n```bash\n$ d:\n$ cd git\n$ git clone git@github.com:nanjingboy/nvmw.git\n# 设置 d:\\git\\nvmw 墓道到 PATH 环境变量\n$ set \"PATH=d:\\git\\nvmw;%PATH%\"\n# 安装\n$ nvmw install 0.12.0\n# 显示当前本地安装的所有 Node.js\n$ nvmw ls \n# 显示服务器所有可用的 Node.js\n$ nvmw ls-remote\n# 本地可用的 Node.js 中使用 0.12.0\n$ nvmw use 0.12.0\n# 设置每次启动默认版本\n$ nvmw switch 0.12.0\n```\n\n### node-gyp 编译环境配置 (可选)\n\nhttps://github.com/TooTallNate/node-gyp#installation\n\n## 安装 spm\n\nPanodra 已经全面迁移到 [spm3](http://10.5.121.139:3001) 的体系上。\n\n```bash\n$ npm install spm -g\n```\n\n## 安装 generator-pandora\n\n我们采用了 yeoman 来生成 pandora 组件，没有用 spm init 来初始\n\n```bash\n$ npm install yo generator-pandora -g\n```\n\n---\n\n好，安装工作完成！\n","date":"2015-07-10T08:21:01.000Z","updated":"2015-07-16T08:26:35.000Z","path":"docs/configuration.html","comments":1,"layout":"page","_id":"cicfvulqn0007tfcyjg4xir3t"}],"Post":[{"title":"Hexo 3.0 Released","_content":"Hexo 3.0 has finally come out! After four beta and four RC versions, Hexo 3 become more stable and more powerful. Thanks for the contributors and testers! \n\n## What's Changed?\n\nThere're many improvements in Hexo 3. Better performance, API is easier to use, higher coverage, etc. Here're some notable changes:\n\n- **[New CLI](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#new-cli)**: Command line interface is separated into a stand-alone module: [hexo-cli]\n- **[Slimmer Core Module](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#slimmer-core-module)**: Generators, deployers and server are also separated from the main module.\n- **[New Generator API](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#new-generator-api)**: Generator API changed a lot in Hexo 3.\n- **[Include Assets in a Post](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#render-pipeline-changed)**: Serveral useful tag plugins are added in Hexo 3: `post_path`, `post_link`, `asset_path`, `asset_link`, `asset_img`.\n- **[Async Tag Plugins](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#async-tag-plugins)**: Tag plugins can do async jobs now!\n- **[Timezone Support](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#timezone-support)**: You can define the timezone of your site now.\n\nMore info: [Breaking Changes in Hexo 3.0], [changelog]\n\n## How to Update?\n\n1. Modify `package.json`.\n\n    {% code %}\n    {\n      \"hexo\": {\n        \"version\": \"\"\n      }\n    }\n    {% endcode %}\n    \n2. Install [hexo-cli]. If any error occurred, try to remove hexo first.\n\n    {% code %}\n    $ npm install hexo-cli -g\n    {% endcode %}\n    \n3. Install Hexo.\n\n    {% code %}\n    $ npm install hexo --save\n    {% endcode %}\n    \n4. Install plugins. You don't have to install all the following plugins. It depends on your need.\n\n    {% code %}\n    $ npm install hexo-server --save\n    $ npm install hexo-generator-index --save\n    $ npm install hexo-generator-archive --save\n    $ npm install hexo-generator-category --save\n    $ npm install hexo-generator-tag --save\n    $ npm install hexo-deployer-git --save\n    $ npm install hexo-deployer-heroku --save\n    $ npm install hexo-deployer-rsync --save\n    $ npm install hexo-deployer-openshift --save\n    {% endcode %}\n    \n5. Update plugins. Especially generators and filters. Since the API has breaking changes in Hexo 3.\n\nMore info: [Migration from 2.x to 3.0]\n\n[Migration from 2.x to 3.0]: https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0\n[hexo-cli]: https://github.com/hexojs/hexo-cli\n[Breaking Changes in Hexo 3.0]: https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0\n[changelog]: https://github.com/hexojs/hexo/releases","source":"_posts/2015-03-05-hexo-3-0-released.md","raw":"title: Hexo 3.0 Released\n---\nHexo 3.0 has finally come out! After four beta and four RC versions, Hexo 3 become more stable and more powerful. Thanks for the contributors and testers! \n\n## What's Changed?\n\nThere're many improvements in Hexo 3. Better performance, API is easier to use, higher coverage, etc. Here're some notable changes:\n\n- **[New CLI](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#new-cli)**: Command line interface is separated into a stand-alone module: [hexo-cli]\n- **[Slimmer Core Module](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#slimmer-core-module)**: Generators, deployers and server are also separated from the main module.\n- **[New Generator API](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#new-generator-api)**: Generator API changed a lot in Hexo 3.\n- **[Include Assets in a Post](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#render-pipeline-changed)**: Serveral useful tag plugins are added in Hexo 3: `post_path`, `post_link`, `asset_path`, `asset_link`, `asset_img`.\n- **[Async Tag Plugins](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#async-tag-plugins)**: Tag plugins can do async jobs now!\n- **[Timezone Support](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#timezone-support)**: You can define the timezone of your site now.\n\nMore info: [Breaking Changes in Hexo 3.0], [changelog]\n\n## How to Update?\n\n1. Modify `package.json`.\n\n    {% code %}\n    {\n      \"hexo\": {\n        \"version\": \"\"\n      }\n    }\n    {% endcode %}\n    \n2. Install [hexo-cli]. If any error occurred, try to remove hexo first.\n\n    {% code %}\n    $ npm install hexo-cli -g\n    {% endcode %}\n    \n3. Install Hexo.\n\n    {% code %}\n    $ npm install hexo --save\n    {% endcode %}\n    \n4. Install plugins. You don't have to install all the following plugins. It depends on your need.\n\n    {% code %}\n    $ npm install hexo-server --save\n    $ npm install hexo-generator-index --save\n    $ npm install hexo-generator-archive --save\n    $ npm install hexo-generator-category --save\n    $ npm install hexo-generator-tag --save\n    $ npm install hexo-deployer-git --save\n    $ npm install hexo-deployer-heroku --save\n    $ npm install hexo-deployer-rsync --save\n    $ npm install hexo-deployer-openshift --save\n    {% endcode %}\n    \n5. Update plugins. Especially generators and filters. Since the API has breaking changes in Hexo 3.\n\nMore info: [Migration from 2.x to 3.0]\n\n[Migration from 2.x to 3.0]: https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0\n[hexo-cli]: https://github.com/hexojs/hexo-cli\n[Breaking Changes in Hexo 3.0]: https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0\n[changelog]: https://github.com/hexojs/hexo/releases","slug":"hexo-3-0-released","published":1,"date":"2015-03-05T00:00:00.000Z","updated":"2015-07-06T00:13:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicfvulqt0008tfcyn0jd10j6"},{"title":"New Documentation and Registry","_content":"The Hexo site has just been updated and changed to a brand new theme. The documentation is also updated and more detailed. Some handy features will make your browsing more convenient.\n\n## Official Registry\n\nBesides the new theme, a official registry for plugins and themes finally comes. The registry makes you easier to browse and search plugins. And you can preview themes with screenshots.\n\n### How to add my plugin/theme to the registry?\n\nSee the following articles for more info. Your plugin/theme will be published to the registry once the pull request is merged.\n\n- [Publish a theme](/docs/themes.html#Publishing)\n- [Publish a plugin](/docs/plugins.html#Publishing)\n\n## Localization\n\nWe have add two new languages of documentation: [Tranditional Chinese (正體中文)](/zh-tw/) and [Simplified Chinese (简体中文)](/zh-cn/). Thanks to [pinggod](https://github.com/pinggod) for the Simplified Chinese translation. We very welcome you to help us translating and make more people easier to get started with Hexo! For more info, see [translating documentation](/docs/contributing.html#Translating).\n\n## Where's API Documentation?\n\nThe API documentation is hidden so far. Please be patient. I'm updating it now. The new API doc will be released in a few days.\n","source":"_posts/2015-02-27-new-documentation-and-registry.md","raw":"title: New Documentation and Registry\n---\nThe Hexo site has just been updated and changed to a brand new theme. The documentation is also updated and more detailed. Some handy features will make your browsing more convenient.\n\n## Official Registry\n\nBesides the new theme, a official registry for plugins and themes finally comes. The registry makes you easier to browse and search plugins. And you can preview themes with screenshots.\n\n### How to add my plugin/theme to the registry?\n\nSee the following articles for more info. Your plugin/theme will be published to the registry once the pull request is merged.\n\n- [Publish a theme](/docs/themes.html#Publishing)\n- [Publish a plugin](/docs/plugins.html#Publishing)\n\n## Localization\n\nWe have add two new languages of documentation: [Tranditional Chinese (正體中文)](/zh-tw/) and [Simplified Chinese (简体中文)](/zh-cn/). Thanks to [pinggod](https://github.com/pinggod) for the Simplified Chinese translation. We very welcome you to help us translating and make more people easier to get started with Hexo! For more info, see [translating documentation](/docs/contributing.html#Translating).\n\n## Where's API Documentation?\n\nThe API documentation is hidden so far. Please be patient. I'm updating it now. The new API doc will be released in a few days.\n","slug":"new-documentation-and-registry","published":1,"date":"2015-02-27T00:00:00.000Z","updated":"2015-07-06T00:13:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicfvulr00009tfcy5z13nqv9"},{"title":"Hexo 2.8 Released","_content":"Hexo 2.8 was rewritten, brings you better performance and many improvements. The following is the highlights in this version. You can check [detail](https://github.com/hexojs/hexo/releases/tag/2.8.0) on GitHub.\n\n## Faster Processing Speed\n\nBefore Hexo 2.8, all source files have to be processed each time you use Hexo. In Hexo 2.8, the entire database will be saved to `db.json` so Hexo don't have to process all files again. Also, a new data type \"**skip**\" was added for processors to detect whether a file was changed or not.\n\nGenerating was also changed in Hexo 2.8. You can check the elapsed time of each file in console now. However, I found multi-process generating didn't affect generating speed a lot. Thus, `multi_thread` and `max_open_file` setting are deprecated in Hexo 2.8.\n\n{% asset_img generate-console.png %}\n\n## Draft Publish\n\nYou don't have to enter full file name to publish a post anymore. Draft publish system is rewritten in Hexo 2.8. `new_post_name` setting will be applied until drafts are published. Besides, you can choose which layout to apply when publishing.\n\n``` bash\n$ hexo publish [layout] <filename>\n```\n\nA new API `post.publish` was added to help you publish drafts more easily.\n\n``` js\nhexo.post.publish({slug: 'hello-world', layout: 'post'}, function(err, target){\n  // ...\n});\n```\n\n## Permalink\n\nFile name and permalink now share a more universal variable system. Every variables in file name can also be read in permalink. Here's a config for example:\n\n``` yaml\npermalink: :type/:title/\nnew_post_name: :type/:title.md\n```\n\nWhen you create a post, the post will be saved to `source/_posts/test/Hello-World.md` and the URL will be `http://localhost:4000/test/Hello-World/`.\n\n``` bash\n$ hexo new \"Hello World\" --type test\n```\n\n## Multi-language Support\n\nWith the new permalink introduced in the previous section, it's much easier to create a multi-language site. For example:\n\n``` yaml\npermalink: :lang/:title/\nnew_post_name: :lang/:title.md\n```\n\nThen you can create a post with `--lang` option:\n\n``` bash\n$ hexo new \"Hello World\" --lang en\n# => This post will be saved to source/_posts/en/Hello-World.md\n# => URL: http://localhost:4000/en/Hello-World/\n\n$ hexo new \"你好世界\" --lang tw\n# => This post will be saved to source/_posts/tw/你好世界.md\n# => URL: http://localhost:4000/tw/你好世界/\n```\n\nYou can define the default value of permalink variables in `permalink_defaults` setting. For example, we define the defualt language as English.\n\n``` yaml\npermalink_defaults:\n  lang: en\n```","source":"_posts/2014-07-13-hexo-2-8-released.md","raw":"title: Hexo 2.8 Released\n---\nHexo 2.8 was rewritten, brings you better performance and many improvements. The following is the highlights in this version. You can check [detail](https://github.com/hexojs/hexo/releases/tag/2.8.0) on GitHub.\n\n## Faster Processing Speed\n\nBefore Hexo 2.8, all source files have to be processed each time you use Hexo. In Hexo 2.8, the entire database will be saved to `db.json` so Hexo don't have to process all files again. Also, a new data type \"**skip**\" was added for processors to detect whether a file was changed or not.\n\nGenerating was also changed in Hexo 2.8. You can check the elapsed time of each file in console now. However, I found multi-process generating didn't affect generating speed a lot. Thus, `multi_thread` and `max_open_file` setting are deprecated in Hexo 2.8.\n\n{% asset_img generate-console.png %}\n\n## Draft Publish\n\nYou don't have to enter full file name to publish a post anymore. Draft publish system is rewritten in Hexo 2.8. `new_post_name` setting will be applied until drafts are published. Besides, you can choose which layout to apply when publishing.\n\n``` bash\n$ hexo publish [layout] <filename>\n```\n\nA new API `post.publish` was added to help you publish drafts more easily.\n\n``` js\nhexo.post.publish({slug: 'hello-world', layout: 'post'}, function(err, target){\n  // ...\n});\n```\n\n## Permalink\n\nFile name and permalink now share a more universal variable system. Every variables in file name can also be read in permalink. Here's a config for example:\n\n``` yaml\npermalink: :type/:title/\nnew_post_name: :type/:title.md\n```\n\nWhen you create a post, the post will be saved to `source/_posts/test/Hello-World.md` and the URL will be `http://localhost:4000/test/Hello-World/`.\n\n``` bash\n$ hexo new \"Hello World\" --type test\n```\n\n## Multi-language Support\n\nWith the new permalink introduced in the previous section, it's much easier to create a multi-language site. For example:\n\n``` yaml\npermalink: :lang/:title/\nnew_post_name: :lang/:title.md\n```\n\nThen you can create a post with `--lang` option:\n\n``` bash\n$ hexo new \"Hello World\" --lang en\n# => This post will be saved to source/_posts/en/Hello-World.md\n# => URL: http://localhost:4000/en/Hello-World/\n\n$ hexo new \"你好世界\" --lang tw\n# => This post will be saved to source/_posts/tw/你好世界.md\n# => URL: http://localhost:4000/tw/你好世界/\n```\n\nYou can define the default value of permalink variables in `permalink_defaults` setting. For example, we define the defualt language as English.\n\n``` yaml\npermalink_defaults:\n  lang: en\n```","slug":"hexo-2-8-released","published":1,"date":"2014-07-13T00:00:00.000Z","updated":"2015-07-06T00:13:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicfvulr2000atfcy1kp6kl76"},{"title":"Hexo 2.7 Released","_content":"Hexo 2.7 has been released with three new features. I'm going to introduce them below.\n\n## Fragment Caching\n\nAlthough Hexo is fast, it may become slow if you have thousands of source files or complicated categories or tags. Before the data model upgraded, I borrowed a feature from Ruby on Rails: **Fragment Caching**.\n\nFragment Caching saves contents within a fragment and serves the cache when the next request come in. A fragment will only be processed once. It can reduce database queries and decrease generation time significantly. For instance, a Hexo site with 300+ source files needs 6 minutes to generate. In Hexo 2.7, it only need 10 seconds!\n\nIt can be used in header, footer, sidebar or static contents that won't be changed during generating. For example:\n\n``` js\n<%- fragment_cache('header', function(){\n  return '<header></header>';\n}); %>\n```\n\nBy using `fragment_cache` helper, contents in the function will be cached.\n\nPartial helper also supports Fragment Caching, you only need to add a `{cache: true}` option when using partial.\n\n``` js\n<%- partial('header', {}, {cache: true}) %>\n```\n\n[Landscape] is updated and supports Fragment Caching now. You can check [this commit](https://github.com/hexojs/hexo-theme-landscape/commit/d2aedda61571d6994eb72d784ceda2f59d2a8631) to see what's changed.\n\n## Relative Link\n\nRelative Link is supported since Hexo 2.7. But your theme needs some modifications to support it. However, it's not as hard as you think. You just need to replace the following contents in templates\n\n``` js\n<%- config.root %><%- path %>\n```\n\nwith `url_for` helper.\n\n``` js\n<%- url_for(path) %>\n```\n\n`url_for` helper will add `config.root` automatically for you. If you enable `relative_link` setting, it'll add a relative path.\n\n[Landscape] is updated for Relative Link. You can check [this commit](https://github.com/hexojs/hexo-theme-landscape/commit/d29cbb83356373af27e7b98643f29a27804364af) to see what's changed.\n\n## Server Middleware\n\nServer Middleware would be familiar if you have ever used [Connect] or [Express] before. [Connect] passes a request through functions called **middleware**. You can make response to the coming in request in middleware.\n\nIn Hexo, middleware is served as a type of filter. You can add middleware by registering a new filter. For example:\n\n``` js\nhexo.extend.filter.register('server_middleware', function(app){\n  app.use(function(req, res, next){\n    res.setHeader('X-Powered-By', 'Hexo');\n    next();\n  });\n});\n```\n\nThis middleware add a header `X-Powered-By` and passes the request to the next middleware.\n\n[Landscape]: https://github.com/hexojs/hexo-theme-landscape\n[Connect]: http://www.senchalabs.org/connect/\n[Express]: http://expressjs.com/","source":"_posts/2014-06-14-hexo-2-7-released.md","raw":"title: Hexo 2.7 Released\n---\nHexo 2.7 has been released with three new features. I'm going to introduce them below.\n\n## Fragment Caching\n\nAlthough Hexo is fast, it may become slow if you have thousands of source files or complicated categories or tags. Before the data model upgraded, I borrowed a feature from Ruby on Rails: **Fragment Caching**.\n\nFragment Caching saves contents within a fragment and serves the cache when the next request come in. A fragment will only be processed once. It can reduce database queries and decrease generation time significantly. For instance, a Hexo site with 300+ source files needs 6 minutes to generate. In Hexo 2.7, it only need 10 seconds!\n\nIt can be used in header, footer, sidebar or static contents that won't be changed during generating. For example:\n\n``` js\n<%- fragment_cache('header', function(){\n  return '<header></header>';\n}); %>\n```\n\nBy using `fragment_cache` helper, contents in the function will be cached.\n\nPartial helper also supports Fragment Caching, you only need to add a `{cache: true}` option when using partial.\n\n``` js\n<%- partial('header', {}, {cache: true}) %>\n```\n\n[Landscape] is updated and supports Fragment Caching now. You can check [this commit](https://github.com/hexojs/hexo-theme-landscape/commit/d2aedda61571d6994eb72d784ceda2f59d2a8631) to see what's changed.\n\n## Relative Link\n\nRelative Link is supported since Hexo 2.7. But your theme needs some modifications to support it. However, it's not as hard as you think. You just need to replace the following contents in templates\n\n``` js\n<%- config.root %><%- path %>\n```\n\nwith `url_for` helper.\n\n``` js\n<%- url_for(path) %>\n```\n\n`url_for` helper will add `config.root` automatically for you. If you enable `relative_link` setting, it'll add a relative path.\n\n[Landscape] is updated for Relative Link. You can check [this commit](https://github.com/hexojs/hexo-theme-landscape/commit/d29cbb83356373af27e7b98643f29a27804364af) to see what's changed.\n\n## Server Middleware\n\nServer Middleware would be familiar if you have ever used [Connect] or [Express] before. [Connect] passes a request through functions called **middleware**. You can make response to the coming in request in middleware.\n\nIn Hexo, middleware is served as a type of filter. You can add middleware by registering a new filter. For example:\n\n``` js\nhexo.extend.filter.register('server_middleware', function(app){\n  app.use(function(req, res, next){\n    res.setHeader('X-Powered-By', 'Hexo');\n    next();\n  });\n});\n```\n\nThis middleware add a header `X-Powered-By` and passes the request to the next middleware.\n\n[Landscape]: https://github.com/hexojs/hexo-theme-landscape\n[Connect]: http://www.senchalabs.org/connect/\n[Express]: http://expressjs.com/","slug":"hexo-2-7-released","published":1,"date":"2014-06-14T00:00:00.000Z","updated":"2015-07-06T00:13:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicfvulrc000btfcybvxommxg"}],"PostAsset":[{"_id":"source/_posts/2014-07-13-hexo-2-8-released/generate-console.png","post":"cicfvulr2000atfcy1kp6kl76","slug":"generate-console.png","modified":1},{"_id":"source/_posts/2014-07-13-hexo-2-8-released/generate-console@2x.png","post":"cicfvulr2000atfcy1kp6kl76","slug":"generate-console@2x.png","modified":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}
